{"ast":null,"code":"import _regeneratorRuntime from \"/home/devika/FinalYear/blockchain/myPartBct/Blockchain-Simple-Loan-IOU-Application/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/devika/FinalYear/blockchain/myPartBct/Blockchain-Simple-Loan-IOU-Application/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from \"web3\";\n\nvar getWeb3 = function getWeb3() {\n  return new Promise(\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(resolve, reject) {\n      var web3, _web, provider, _web2;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!window.ethereum) {\n                _context.next = 14;\n                break;\n              }\n\n              web3 = new Web3(window.ethereum);\n              _context.prev = 2;\n              _context.next = 5;\n              return window.ethereum.enable();\n\n            case 5:\n              window.ethereum.on('accountsChanged', function (accounts) {\n                web3.eth.coinbase = accounts[0];\n                console.log(\"here\" + accounts[0]);\n                window.location.reload();\n              }); // Accounts now exposed\n\n              resolve(web3);\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](2);\n              reject(_context.t0);\n\n            case 12:\n              _context.next = 15;\n              break;\n\n            case 14:\n              /// Legacy dapp browers...\n              if (window.web3) {\n                // Use Mist/Metamask's provider.\n                _web = window.web3;\n                console.log('Injected web3 detected');\n                resolve(_web);\n              } // Fallback to localhost; use dev console port by default...\n              else {\n                  provider = new Web3.providers.HttpProvider(\"http://localhost:7545\");\n                  _web2 = new Web3(provider);\n                  console.log(\"No web3 instance injected, using local web3.\");\n                  resolve(_web2);\n                }\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[2, 9]]);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n};\n\nexport default getWeb3;","map":{"version":3,"sources":["/home/devika/FinalYear/blockchain/myPartBct/Blockchain-Simple-Loan-IOU-Application/client/src/utils/getWeb3.js"],"names":["Web3","getWeb3","Promise","resolve","reject","window","ethereum","web3","enable","on","accounts","eth","coinbase","console","log","location","reload","provider","providers","HttpProvider"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA,SACZ,IAAIC,OAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAY,iBAAMC,OAAN,EAAeC,MAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGAC,MAAM,CAACC,QAHP;AAAA;AAAA;AAAA;;AAIMC,cAAAA,IAJN,GAIa,IAAIP,IAAJ,CAASK,MAAM,CAACC,QAAhB,CAJb;AAAA;AAAA;AAAA,qBAOUD,MAAM,CAACC,QAAP,CAAgBE,MAAhB,EAPV;;AAAA;AAQIH,cAAAA,MAAM,CAACC,QAAP,CAAgBG,EAAhB,CAAmB,iBAAnB,EAAsC,UAAUC,QAAV,EAAoB;AACtDH,gBAAAA,IAAI,CAACI,GAAL,CAASC,QAAT,GAAoBF,QAAQ,CAAC,CAAD,CAA5B;AACAG,gBAAAA,OAAO,CAACC,GAAR,CAAY,SAAOJ,QAAQ,CAAC,CAAD,CAA3B;AACAL,gBAAAA,MAAM,CAACU,QAAP,CAAgBC,MAAhB;AACH,eAJD,EARJ,CAaI;;AACAb,cAAAA,OAAO,CAACI,IAAD,CAAP;AAdJ;AAAA;;AAAA;AAAA;AAAA;AAgBIH,cAAAA,MAAM,aAAN;;AAhBJ;AAAA;AAAA;;AAAA;AAmBJ;AACK,kBAAIC,MAAM,CAACE,IAAX,EAAiB;AAClB;AACMA,gBAAAA,IAFY,GAELF,MAAM,CAACE,IAFF;AAGlBM,gBAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAX,gBAAAA,OAAO,CAACI,IAAD,CAAP;AACH,eALI,CAML;AANK,mBAOA;AACKU,kBAAAA,QADL,GACgB,IAAIjB,IAAI,CAACkB,SAAL,CAAeC,YAAnB,CAAgC,uBAAhC,CADhB;AAEKZ,kBAAAA,KAFL,GAEY,IAAIP,IAAJ,CAASiB,QAAT,CAFZ;AAGDJ,kBAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAX,kBAAAA,OAAO,CAACI,KAAD,CAAP;AACH;;AAhCG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAZ;;AAAA;AAAA;AAAA;AAAA,MADY;AAAA,CAAhB;;AAoCI,eAAeN,OAAf","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () => \n    new Promise(async(resolve, reject) => {\n        // Wait for loading completion to avoid race conditions with web3 injection timing.\n            // Moder dapp browers\n            if (window.ethereum) {\n                const web3 = new Web3(window.ethereum);\n                try {\n                    // Request account access if needed\n                    await window.ethereum.enable();\n                    window.ethereum.on('accountsChanged', function (accounts) {\n                        web3.eth.coinbase = accounts[0];\n                        console.log(\"here\"+accounts[0]);\n                        window.location.reload();\n                    })\n                    // Accounts now exposed\n                    resolve(web3);\n                } catch(error) {\n                    reject(error);\n                }\n            }\n            /// Legacy dapp browers...\n            else if (window.web3) {\n                // Use Mist/Metamask's provider.\n                const web3 = window.web3;\n                console.log('Injected web3 detected');\n                resolve(web3);\n            }\n            // Fallback to localhost; use dev console port by default...\n            else {\n                const provider = new Web3.providers.HttpProvider(\"http://localhost:7545\");\n                const web3 = new Web3(provider);\n                console.log(\"No web3 instance injected, using local web3.\");\n                resolve(web3);\n            }\n        });\n    \n    export default getWeb3;\n    "]},"metadata":{},"sourceType":"module"}