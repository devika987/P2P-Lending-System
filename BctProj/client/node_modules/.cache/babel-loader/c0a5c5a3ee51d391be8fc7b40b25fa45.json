{"ast":null,"code":"import _regeneratorRuntime from \"/home/devika/FinalYear/blockchain/loanBCT/Blockchain-Simple-Loan-IOU-Application/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/devika/FinalYear/blockchain/loanBCT/Blockchain-Simple-Loan-IOU-Application/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from \"web3\"; // Wait for loading completion to avoid race conditions with web3 injection timing.\n\nwindow.addEventListener('load', function () {\n  // Checking if Web3 has been injected by the browser (Mist/MetaMask)\n  if (typeof web3 !== 'undefined') {\n    console.warn(\"Using web3 detected from external source. If you find that your accounts don't appear or you have 0 MetaCoin, ensure you've configured that source properly. If using MetaMask, see the following link. Feel free to delete this warning. :) http://truffleframework.com/tutorials/truffle-and-metamask\"); // Use Mist/MetaMask's provider\n\n    window.web3 = new Web3(web3.currentProvider);\n  } else {\n    console.warn(\"No web3 detected. Falling back to http://localhost:9545. You should remove this fallback when you deploy live, as it's inherently insecure. Consider switching to Metamask for development. More info here: http://truffleframework.com/tutorials/truffle-and-metamask\"); // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)\n\n    window.web3 = new Web3(new Web3.providers.HttpProvider(\"http://localhost:8545\"));\n  } // App.start();\n\n});\nwindow.addEventListener(\"load\",\n/*#__PURE__*/\n_asyncToGenerator(\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee() {\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!window.ethereum) {\n            _context.next = 12;\n            break;\n          }\n\n          window.web3 = new Web3(ethereum);\n          _context.prev = 2;\n          _context.next = 5;\n          return ethereum.enable();\n\n        case 5:\n          // Acccounts now exposed\n          web3.eth.getAccounts(function (err, accs) {\n            wtoE = web3.toWei(1, 'ether');\n            console.warn(\"accs[0] is \" + accs[0]);\n            account = accs[0];\n            console.warn(\"heeloo\" + account);\n          });\n          _context.next = 10;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](2);\n\n        case 10:\n          _context.next = 13;\n          break;\n\n        case 12:\n          // Legacy dapp browsers...\n          if (window.web3) {\n            window.web3 = new Web3(web3.currentProvider); // Acccounts always exposed\n\n            web3.eth.getAccounts(function (err, accs) {\n              wtoE = web3.toWei(1, 'ether');\n              console.warn(\"accs[0] is \" + accs[0]);\n              account = accs[0];\n              console.warn(\"heeloo\" + account);\n            });\n          } // Non-dapp browsers...\n          else {\n              console.warn('Non-Ethereum browser detected. You should consider trying MetaMask!');\n            }\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee, this, [[2, 8]]);\n})));\nexport default getWeb3;","map":{"version":3,"sources":["/home/devika/FinalYear/blockchain/loanBCT/Blockchain-Simple-Loan-IOU-Application/client/src/utils/getWeb3.js"],"names":["Web3","window","addEventListener","web3","console","warn","currentProvider","providers","HttpProvider","ethereum","enable","eth","getAccounts","err","accs","wtoE","toWei","account","getWeb3"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB,C,CAEQ;;AAEPC,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAW;AAChC;AAGA,MAAI,OAAOC,IAAP,KAAgB,WAApB,EAAiC;AAC/BC,IAAAA,OAAO,CAACC,IAAR,CAAa,ySAAb,EAD+B,CAE/B;;AACAJ,IAAAA,MAAM,CAACE,IAAP,GAAc,IAAIH,IAAJ,CAASG,IAAI,CAACG,eAAd,CAAd;AACD,GAJD,MAIO;AACLF,IAAAA,OAAO,CAACC,IAAR,CAAa,wQAAb,EADK,CAEL;;AACAJ,IAAAA,MAAM,CAACE,IAAP,GAAc,IAAIH,IAAJ,CAAS,IAAIA,IAAI,CAACO,SAAL,CAAeC,YAAnB,CAAgC,uBAAhC,CAAT,CAAd;AACD,GAZ+B,CAchC;;AACD,CAfV;AAiBDP,MAAM,CAACC,gBAAP,CAAwB,MAAxB;AAAA;AAAA;AAAA;AAAA,yBAAgC;AAAA;AAAA;AAAA;AAAA;AAAA,eAEpBD,MAAM,CAACQ,QAFa;AAAA;AAAA;AAAA;;AAGpBR,UAAAA,MAAM,CAACE,IAAP,GAAc,IAAIH,IAAJ,CAASS,QAAT,CAAd;AAHoB;AAAA;AAAA,iBAMVA,QAAQ,CAACC,MAAT,EANU;;AAAA;AAOhB;AACAP,UAAAA,IAAI,CAACQ,GAAL,CAASC,WAAT,CAAqB,UAASC,GAAT,EAAcC,IAAd,EAAoB;AACrCC,YAAAA,IAAI,GAAGZ,IAAI,CAACa,KAAL,CAAW,CAAX,EAAa,OAAb,CAAP;AACAZ,YAAAA,OAAO,CAACC,IAAR,CAAa,gBAAcS,IAAI,CAAC,CAAD,CAA/B;AACAG,YAAAA,OAAO,GAAGH,IAAI,CAAC,CAAD,CAAd;AACAV,YAAAA,OAAO,CAACC,IAAR,CAAa,WAASY,OAAtB;AAEH,WAND;AARgB;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAmBpB;AACK,cAAIhB,MAAM,CAACE,IAAX,EAAiB;AACtBF,YAAAA,MAAM,CAACE,IAAP,GAAc,IAAIH,IAAJ,CAASG,IAAI,CAACG,eAAd,CAAd,CADsB,CAEtB;;AACAH,YAAAA,IAAI,CAACQ,GAAL,CAASC,WAAT,CAAqB,UAASC,GAAT,EAAcC,IAAd,EAAoB;AACrCC,cAAAA,IAAI,GAAGZ,IAAI,CAACa,KAAL,CAAW,CAAX,EAAa,OAAb,CAAP;AACAZ,cAAAA,OAAO,CAACC,IAAR,CAAa,gBAAcS,IAAI,CAAC,CAAD,CAA/B;AACAG,cAAAA,OAAO,GAAGH,IAAI,CAAC,CAAD,CAAd;AACAV,cAAAA,OAAO,CAACC,IAAR,CAAa,WAASY,OAAtB;AAEH,aAND;AAOC,WAVI,CAWL;AAXK,eAYA;AACLb,cAAAA,OAAO,CAACC,IAAR,CAAa,qEAAb;AACC;;AAlCmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhC;AAuCA,eAAea,OAAf","sourcesContent":["import Web3 from \"web3\";\n\n        // Wait for loading completion to avoid race conditions with web3 injection timing.\n\n window.addEventListener('load', function() {\n            // Checking if Web3 has been injected by the browser (Mist/MetaMask)\n            \n            \n            if (typeof web3 !== 'undefined') {\n              console.warn(\"Using web3 detected from external source. If you find that your accounts don't appear or you have 0 MetaCoin, ensure you've configured that source properly. If using MetaMask, see the following link. Feel free to delete this warning. :) http://truffleframework.com/tutorials/truffle-and-metamask\")\n              // Use Mist/MetaMask's provider\n              window.web3 = new Web3(web3.currentProvider);\n            } else {\n              console.warn(\"No web3 detected. Falling back to http://localhost:9545. You should remove this fallback when you deploy live, as it's inherently insecure. Consider switching to Metamask for development. More info here: http://truffleframework.com/tutorials/truffle-and-metamask\");\n              // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)\n              window.web3 = new Web3(new Web3.providers.HttpProvider(\"http://localhost:8545\"));\n            }\n          \n            // App.start();\n          });\n          \nwindow.addEventListener(\"load\", async() => {\n        // Moder dapp browers\n        if (window.ethereum) {\n            window.web3 = new Web3(ethereum);\n            try {\n                // Request account access if needed\n                await ethereum.enable();\n                // Acccounts now exposed\n                web3.eth.getAccounts(function(err, accs) {\n                    wtoE = web3.toWei(1,'ether');\n                    console.warn(\"accs[0] is \"+accs[0]);\n                    account = accs[0];\n                    console.warn(\"heeloo\"+account);\n                    \n                });\n            } catch (error) {\n                // User denied account access...\n            }\n            }\n            // Legacy dapp browsers...\n            else if (window.web3) {\n            window.web3 = new Web3(web3.currentProvider);\n            // Acccounts always exposed\n            web3.eth.getAccounts(function(err, accs) {\n                wtoE = web3.toWei(1,'ether');\n                console.warn(\"accs[0] is \"+accs[0]);\n                account = accs[0];\n                console.warn(\"heeloo\"+account);\n                \n            });\n            }\n            // Non-dapp browsers...\n            else {\n            console.warn('Non-Ethereum browser detected. You should consider trying MetaMask!');\n            }\n            });\n            \n\n\nexport default getWeb3;\n"]},"metadata":{},"sourceType":"module"}