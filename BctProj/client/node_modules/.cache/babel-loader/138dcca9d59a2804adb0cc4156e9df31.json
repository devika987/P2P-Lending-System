{"ast":null,"code":"import _regeneratorRuntime from \"/home/devika/FinalYear/blockchain/loanBCT/Blockchain-Simple-Loan-IOU-Application/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/devika/FinalYear/blockchain/loanBCT/Blockchain-Simple-Loan-IOU-Application/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from \"web3\"; // Wait for loading completion to avoid race conditions with web3 injection timing.\n\nvar getWeb3 = function getWeb3() {\n  return new Promise(function (resolve, reject) {\n    window.addEventListener('load', function () {\n      // Checking if Web3 has been injected by the browser (Mist/MetaMask)\n      if (typeof web3 !== 'undefined') {\n        console.warn(\"Using web3 detected from external source. If you find that your accounts don't appear or you have 0 MetaCoin, ensure you've configured that source properly. If using MetaMask, see the following link. Feel free to delete this warning. :) http://truffleframework.com/tutorials/truffle-and-metamask\"); // Use Mist/MetaMask's provider\n\n        var _web = new Web3(_web.currentProvider);\n      } else {\n        console.warn(\"No web3 detected. Falling back to http://localhost:9545. You should remove this fallback when you deploy live, as it's inherently insecure. Consider switching to Metamask for development. More info here: http://truffleframework.com/tutorials/truffle-and-metamask\"); // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)\n\n        var _web2 = new Web3(new Web3.providers.HttpProvider(\"http://localhost:8545\"));\n      } // App.start();\n\n    });\n    window.addEventListener(\"load\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var _web3, _web4;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!window.ethereum) {\n                _context.next = 12;\n                break;\n              }\n\n              _web3 = new Web3(window.ethereum);\n              _context.prev = 2;\n              _context.next = 5;\n              return window.ethereum.enable();\n\n            case 5:\n              // Acccounts now exposed\n              _web3.eth.getAccounts(function (err, accs) {\n                console.warn(\"accs[0] is \" + accs[0]);\n              });\n\n              _context.next = 10;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](2);\n\n            case 10:\n              _context.next = 13;\n              break;\n\n            case 12:\n              // Legacy dapp browsers...\n              if (window.web3) {\n                _web4 = new Web3(_web4.currentProvider); // Acccounts always exposed\n\n                _web4.eth.getAccounts(function (err, accs) {\n                  console.warn(\"accs[0] is \" + accs[0]);\n                });\n              } // Non-dapp browsers...\n              else {\n                  console.warn('Non-Ethereum browser detected. You should consider trying MetaMask!');\n                }\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[2, 8]]);\n    })));\n  });\n};\n\nexport default getWeb3;","map":{"version":3,"sources":["/home/devika/FinalYear/blockchain/loanBCT/Blockchain-Simple-Loan-IOU-Application/client/src/utils/getWeb3.js"],"names":["Web3","getWeb3","Promise","resolve","reject","window","addEventListener","web3","console","warn","currentProvider","providers","HttpProvider","ethereum","enable","eth","getAccounts","err","accs"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB,C,CAEQ;;AACR,IAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA,SACR,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACxCC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAW;AAChC;AAGA,UAAI,OAAOC,IAAP,KAAgB,WAApB,EAAiC;AAC/BC,QAAAA,OAAO,CAACC,IAAR,CAAa,ySAAb,EAD+B,CAE/B;;AACA,YAAMF,IAAI,GAAG,IAAIP,IAAJ,CAASO,IAAI,CAACG,eAAd,CAAb;AAED,OALD,MAKO;AACLF,QAAAA,OAAO,CAACC,IAAR,CAAa,wQAAb,EADK,CAEL;;AACA,YAAMF,KAAI,GAAG,IAAIP,IAAJ,CAAS,IAAIA,IAAI,CAACW,SAAL,CAAeC,YAAnB,CAAgC,uBAAhC,CAAT,CAAb;AAED,OAd+B,CAgBhC;;AACD,KAjBV;AAmBDP,IAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB;AAAA;AAAA;AAAA;AAAA,6BAAgC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEpBD,MAAM,CAACQ,QAFa;AAAA;AAAA;AAAA;;AAGdN,cAAAA,KAHc,GAGP,IAAIP,IAAJ,CAASK,MAAM,CAACQ,QAAhB,CAHO;AAAA;AAAA;AAAA,qBAMVR,MAAM,CAACQ,QAAP,CAAgBC,MAAhB,EANU;;AAAA;AAOhB;AACAP,cAAAA,KAAI,CAACQ,GAAL,CAASC,WAAT,CAAqB,UAASC,GAAT,EAAcC,IAAd,EAAoB;AACrCV,gBAAAA,OAAO,CAACC,IAAR,CAAa,gBAAcS,IAAI,CAAC,CAAD,CAA/B;AAGH,eAJD;;AARgB;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAiBpB;AACK,kBAAIb,MAAM,CAACE,IAAX,EAAiB;AAChBA,gBAAAA,KADgB,GACT,IAAIP,IAAJ,CAASO,KAAI,CAACG,eAAd,CADS,EAEtB;;AACAH,gBAAAA,KAAI,CAACQ,GAAL,CAASC,WAAT,CAAqB,UAASC,GAAT,EAAcC,IAAd,EAAoB;AACrCV,kBAAAA,OAAO,CAACC,IAAR,CAAa,gBAAcS,IAAI,CAAC,CAAD,CAA/B;AAGH,iBAJD;AAKC,eARI,CASL;AATK,mBAUA;AACLV,kBAAAA,OAAO,CAACC,IAAR,CAAa,qEAAb;AACC;;AA9BmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhC;AAiCK,GArDG,CADQ;AAAA,CAAhB;;AAyDA,eAAeR,OAAf","sourcesContent":["import Web3 from \"web3\";\n\n        // Wait for loading completion to avoid race conditions with web3 injection timing.\nconst getWeb3 = () => \n        new Promise((resolve, reject) => {\n window.addEventListener('load', function() {\n            // Checking if Web3 has been injected by the browser (Mist/MetaMask)\n            \n            \n            if (typeof web3 !== 'undefined') {\n              console.warn(\"Using web3 detected from external source. If you find that your accounts don't appear or you have 0 MetaCoin, ensure you've configured that source properly. If using MetaMask, see the following link. Feel free to delete this warning. :) http://truffleframework.com/tutorials/truffle-and-metamask\")\n              // Use Mist/MetaMask's provider\n              const web3 = new Web3(web3.currentProvider);\n\n            } else {\n              console.warn(\"No web3 detected. Falling back to http://localhost:9545. You should remove this fallback when you deploy live, as it's inherently insecure. Consider switching to Metamask for development. More info here: http://truffleframework.com/tutorials/truffle-and-metamask\");\n              // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)\n              const web3 = new Web3(new Web3.providers.HttpProvider(\"http://localhost:8545\"));\n\n            }\n          \n            // App.start();\n          });\n          \nwindow.addEventListener(\"load\", async() => {\n        // Moder dapp browers\n        if (window.ethereum) {\n            const web3 = new Web3(window.ethereum);\n            try {\n                // Request account access if needed\n                await window.ethereum.enable();\n                // Acccounts now exposed\n                web3.eth.getAccounts(function(err, accs) {\n                    console.warn(\"accs[0] is \"+accs[0]);\n                   \n                    \n                });\n            } catch (error) {\n                // User denied account access...\n            }\n            }\n            // Legacy dapp browsers...\n            else if (window.web3) {\n            const web3 = new Web3(web3.currentProvider);\n            // Acccounts always exposed\n            web3.eth.getAccounts(function(err, accs) {\n                console.warn(\"accs[0] is \"+accs[0]);\n               \n                \n            });\n            }\n            // Non-dapp browsers...\n            else {\n            console.warn('Non-Ethereum browser detected. You should consider trying MetaMask!');\n            }\n            \n        });\n    });\n\n\nexport default getWeb3;\n"]},"metadata":{},"sourceType":"module"}